[{"title":"360企业安全实习生面经","date":"2018-11-15T01:42:58.897Z","path":"2018/11/15/360企业安全实习生面经/","text":"360企业安全实习生面经面试时间及岗位时间：2018 年 11 月 17 日 下午 4 点 岗位：360企业安全实习生 技术官面1.是否还有课，论文什么时候答辩 2.看我比较擅长 Python，问我有没有搭过什么系统 搭过公众号开发的一个查询功能 3.有没有写过爬虫或者什么漏洞利用工具（ EXP 和 POC ） 写过 Python 爬虫，抢课代码，没写过 EXP 和 POC 4.Linux 进程如何查看？ 我回答 ps -a,但是应该回答 ps aux 更好 5.Windows 安全日志在哪里？ 当时没回答出来 答案：计算机 - 管理 - 事件查看器 - Windows 日志 - 安全 6.目前有用过哪些扫描器？ Nmap、AWVS、sqlmap、BurpSuite 当时回答 BurpSuite 说没有扫描功能很尴尬，技术官指出来说 BurpSuite 是现在最好用的扫描器，集成了各种功能，抓包解码重放爆破 7.有没有实习过 没有实习过，刚找实习，面试官因此就问我过去新环境有没有问题 我回答之前社团工作了两年，经常与人沟通，适应能力很好 8.任意文件读取漏洞产生的原理 下载功能或者读取文件时候没有对权限进行控制，允许它跳转到 WEB 目录 9.任意文件读取漏洞正常出现在什么功能点？ 下载功能或者读取文件，查看一些文件的时候 10.XSS 原理 XSS 有三种类型(反射型、存储型、DOM 型)，原理是因为没有过滤客户端提交的数据，被利用后回显到平台 11.有没有利用过 XSS 平台 没有…… 12.目前有接触过什么病毒木马吗 WannaCry病毒 13.病毒环境有哪些特征？病毒的一些特征（除了勒索软件，比如挖矿有什么特征） CPU利用资源特别高、不停的发包 面试官解释这属于网络行为，挖矿会请求矿池，可以通过抓包的方式观察是不是一直在访问矿池，可以确认是不是有挖矿行为 本机上可能有蠕虫行为、肯定会扩散，植入一堆挖矿病毒 本机上以防你删除掉查杀掉，还会有一些自启动服务防止被删除 14.祖籍在哪里 15.平时有没有处理过 EXCEL 和 WORD，有没有做过一些数据统计或者数据分析 有的，用过Python数据分析，EXCEL基本操作快捷键都会 16.EXCEL函数有用过哪些？ sum、mid、count、if、lookup 17.是不是打算走普通实习，要不要考虑走校招，再过两轮面试 走实习，我就问有没有机会转正，面试官说有，看实习表现 18.问我有没有用过 Java 没有 19.问我有没有考虑过在家那边找工作","tags":[{"name":"面试","slug":"面试","permalink":"http://yanjin.io/tags/面试/"}]},{"title":"威胁猎人初级安全实习生面经","date":"2018-11-15T01:42:58.897Z","path":"2018/11/15/威胁猎人初级安全实习生面经/","text":"威胁猎人初级安全实习生面经面试时间及岗位时间：2018 年 11 月 9 日 下午 4 点 岗位：威胁猎人初级安全实习生 技术官一面技术官主要是看了我的简历，开始说道他也是通信工程毕业的，知道我们电子信息科学与技术学什么，知道我们学的很杂哈哈。 然后问了我下面几个问题： 1.OSI 七层模型是哪七层？（没答出来全部，记得一两个） 2.有没有用过 Linux 系统 3.Cat 命令和 Grep 命令的使用方法，比如说考了我如何匹配搜索两个 TXT，一个 TXT 文本里面有很多 ip 地址，另外一个 TXT 文本里面包含了很多黑产的监控流量有 ip 地址，发送数据包之类的 4.是否了解黑产和灰产，让我说说自己知道的 我回答了猫池，还有物联网 IOT 的肉鸡 DDOS 攻击，打码平台，薅羊毛党啊等等 然后技术官就跟我介绍了他们这个部门主要做啥 CTO二面当时大佬一进来我就震惊了，我以为一面就可以了，我只是面一个实习生咋还跑出来大佬呢 1.什么时候开始学安全的（我回答今年年初） 2.设计一个登陆注册的系统有什么要考虑的地方 要有验证码功能，而且最好用现在比较难以破解的验证码，比如 Google 和网易的验证码。 密码也应该有强度要求，然后不能直接明文发生登陆或者注册请求到服务器，要加盐加密传输，数据库存储也应该是加盐加密保存，防止被脱裤之后明文裸奔 参数还要带有 csfr_token 值防止 CSRF 攻击 cookie 中要设置 HttpOnly 属性，那么通过 js 脚本将无法读取到 cookie 信息，这样能有效的防止 XSS 攻击 对于参数的输入要进行参数化参训防止SQL注入 3.https 能不能被破解 我说可以，就是在客户端或者服务器端劫持，替换了证明就可以看到 https 明文传输的内容。但是 CTO 指出来这是因为你用了抓包工具，而且还是在网站没有校验证书的情况下，如果校验的话中间人劫持也没用 4.我简历上学校正方的漏洞是怎么挖到的 5.自己还有投别的公司拿到 offer 吗？（我说还投了一家教育公司，他就有点怀疑我是不是真的喜欢安全了，这里建议不要回答不相关的） 6.问我如果数据库被脱裤了，有什么处理方案 一赶紧溯源攻击，找到入侵者，然后寻找是否这个数据库是否在网上公开，要即可减少被售卖或者公开的机会 二是告诉用户，提醒用户改密码 面试的时候，大佬眉头一直紧皱的看着我的简历，让我很害怕 HR面HR面就没问啥了，问我期望薪水。我说 4k-5k 然后似乎被嘲笑了哈哈，说实习生工资没有这么高的，进来主要是学东西。 还问我几时可以到岗，最后是拿到这个实习生 offer 啦！","tags":[{"name":"面试","slug":"面试","permalink":"http://yanjin.io/tags/面试/"}]},{"title":"携程测试实习生面经","date":"2018-11-15T01:42:58.897Z","path":"2018/11/15/携程测试实习生面经/","text":"携程测试实习生面经面试时间及岗位时间：2018 年 11 月 14 日 晚上 6 点 岗位：携程测试实习生 HR一面1.是否找到了实习，因为捞我的简历起来已经过了一个星期，怕我已经找到实习了 2.还问我是否愿意接受测试的岗位，因为看到我之前有做过一些开发项目 3.约技术面试时间 技术官二面1.自我介绍一下 2.让我依次介绍我的项目干了什么 3.让我看一段代码，代码就不放出来，可能涉及公司隐私，不难 4.让我打开携程首页，问我一个机票的界面这里需要测试什么 然后面试官问我还有什么要问的吗？我就问还要不要继续面试，她说没有了，基本可以了，问我几时可以到岗，最长可以实习多久 总结想去携程是因为感觉公司比较大，投测试是因为比较好进，开发岗位的话自己基础不够好很容易给刷，但是还没考虑好去不去携程。","tags":[{"name":"面试","slug":"面试","permalink":"http://yanjin.io/tags/面试/"}]},{"title":"金山服务端开发实习面试总结","date":"2018-05-14T02:42:19.000Z","path":"2018/05/14/金山服务端开发实习面试总结/","text":"面试时间及岗位时间：2018 年 5 月 14 日 上午 10 点 岗位：金山办公软件服务端开发工程师实习生 面试问题以下文字和面试时候问题不一定一摸一样，靠记忆补充的。 问：你会 CSS3 吗？ 答：不会 问：你会 JS 吗 答：不会 问：那这个岗位需要这两个技能啊 答：但是我可以很快学习这两个，我自学能力比较好。比如说我做的那个微信公众号查询形势与政策的功能，只花了 10 天左右。 问：一般人学 Python 3 天就够啦 我：…… 面试官看了看我项目的经历写着创业基础一键刷课，抢课助手。问我为什么要写这些程序，创业基础课程本来就是学生要学生听课的，你这样子等同于作弊。 我：…..（我就是想锻炼一下技术，帮帮别人。但是面试官说的太有道理了，我没话说，只好赞同。这种课上了有啥用？） 面试官：你这个是政治不正确 我：…… 面试官：你为什么要写这个教学平台的一键查询程序呢？ 我：为了方便大家查询，之前同学们如果有几门作业未提交，就需要一个一个点进去看，很不方便。我的这个程序可以直接一次显示完全部科目的未提交作业。 面试官：那你这样为什么不直接跟开发厂商反应，让他们提升用户体验呢？你现在这个程序有人用吗？写了几天花费这么多时间，但是没有实际用途。 我：我想过写成微信小程序给大家用…… 面试官：你为什么要在你的简历上写这么多社团经历，在大学里面花这么多时间去社团，这些社团经历跟你写代码有关系吗？ 我：但是加入了社团锻炼了我沟通能力，社交能力啊。 面试官：那这些能力和写代码能力有关系吗？ 我：…… 我：面试官，那我给您看看我的成绩单。之前因为在社团也没有好好学习，但现在退出后一直在好好学习，每学期都在进步，从 2.6, 3.1, 3.5 再到 4.1 。说明我的学习能力还是可以的。 面试官：但是你可以看看班上一些女孩子，学习成绩很好，但是写代码不行啊。这个也跟写代码能力没有关系。 我：…… 面试官：那还是来点实际的，你说一下二分查找的算法。 我：一开始说了直接从中间开始查找，但是根本还没排序。想到排序了，但是不会写冒泡排序的算法了。 没答出来面试官就直接走了，说面试结束。我知道自己肯定挂了，等了许久 HR 也没来，我就直接走了。 总结1.刷题刷题刷题！我的数据结构一点都没学，也没去刷题，这个是面试失败最根本的原因。我之前复习的策略都在简历上的知识点，没有弄面试的算法题，这个致命伤。 2.简历上的项目不要写那些带有违反规定或者政治不正确的项目。比如我这次的抢课助手和刷课项目，我也得承认这两个东西违反了一些规定，但是学技术的人难道就没有 Geek 精神吗？你可以测试，但是不能有盈利就好了。 3.社团经历如果是面试技术岗位，能不写还是不写了吧。面试官对社团经历的个人偏好完全影响了他对你的个人印象。有的面试官可能喜欢社会实践经验多的，有的面试官完全不喜欢。 说到社团就是一把辛酸泪，感觉两年的付出给这个面试官全抛否定了。但我知道我收获了什么，见世面，沟通能力，协调能力，这是写代码能带来的？ 不是，这些能力才是社会上更重要的技能。 写代码是一定要很熟练的，但是只会写代码是不行的。 不过也看得出来，我现在是连写代码都不会的人哈哈哈！本末倒置。 4.大学成绩金山的这个面试官不看重成绩，看重的是写代码的能力。 我也知道一个朋友的朋友，就会因为项目经验多，写代码能力强去了小米。虽然挂科很多，成绩很差。 这也从侧面体现出了互联网公司对于大学成绩的看法。 但是从我自己的角度来看，如果想继续读研究生，成绩还是非常重要的。你有成绩至少有几条路可以选，没有成绩就只能工作了，或者你很有钱去国外留学。","tags":[{"name":"面试","slug":"面试","permalink":"http://yanjin.io/tags/面试/"}]},{"title":"微信公众号推文永久链接爬虫","date":"2018-04-26T03:41:18.000Z","path":"2018/04/26/微信公众号推文永久链接爬虫/","text":"微信公众号推文永久链接爬虫需求获取某个或多个微信公众号的所有文章，并且文章的链接是永久链接。比如我之前想分析学校公众号的某一个长期栏目，就需要他所有相关推送的文章内容。但是有 100+ 的推送，总不可能一篇一篇文章的去保存它的链接对吧？因此要想办法自动获取到所有的链接，再通过打开链接得到文章内容。 原理利用微信公众号后台素材管理－新建图文素材－超链接－查找文章（公众号）的接口。因此，我们要做的就是模拟这个请求。1.Selenium ＋ Webdriver 登陆微信公众平台，获取公众号的Cookie2.登陆之后获取 token 值，因为之后所有请求都需要带 token 这个参数3.模拟搜索公众号，每个公众号有对应的 fakeid，我们要得到公众号的fakeid4.模拟搜索公众号内的文章，self.query 这个值为搜索公众号文章的关键字，默认为空，可以修改为自己想要找的公众号文章标题对应的关键字。此时会返回一个 JSON 包，app_msg_list 中的 link 就是我们要的链接。 前提你要有一个自己的微信公众号（订阅号）Python环境：Python3 方法修改 wechat_official_accounts 为想要搜索公众号的微信号，支持多个微信号修改 username 为自己订阅号的账号修改 password 为自己订阅号的密码修改 self.query 为自己想要搜索的公众号文章标题对应的关键字修改 self.driver = webdriver.Firefox(executable_path=’/Users/zl/Downloads/geckodriver’) 为自己对应的 geckodriver 内核地址，也可以使用 Chrome 浏览器 代码Talk is cheap，show you my code。Github 项目代码地址: https://github.com/ttys0001/wechat-spider 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118import timeimport requestsimport jsonimport reimport randomfrom selenium import webdriverclass WechatArticleUrl: def __init__(self,wechat_official_accounts,username,password): self.wechat_official_accounts = wechat_official_accounts self.article_url_list = [] self.driver = webdriver.Firefox(executable_path=&apos;/Users/zl/Downloads/geckodriver&apos;) self.account_str = [username, password] self.cookies = &#123;&#125; self.token = &apos;&apos; self.header = &#123; &quot;HOST&quot;: &quot;mp.weixin.qq.com&quot;, &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0&quot; &#125; self.query = &apos;&apos; def __main__(self): self.login_wechat_official() self.get_token() self.get_url() def login_wechat_official(self): self.driver.get(&apos;https://mp.weixin.qq.com/&apos;) time.sleep(2) # ============登录，获取cookie self.driver.find_element_by_name(&apos;account&apos;).clear() self.driver.find_element_by_name(&apos;account&apos;).send_keys(self.account_str[0]) self.driver.find_element_by_name(&apos;password&apos;).clear() self.driver.find_element_by_name(&apos;password&apos;).send_keys(self.account_str[1]) # 在自动输完密码之后记得点一下记住我 time.sleep(2) self.driver.find_element_by_xpath(&quot;./*//a[@class=&apos;btn_login&apos;]&quot;).click() # 拿手机扫二维码！ time.sleep(10) self.driver.get(&apos;https://mp.weixin.qq.com/&apos;) cookie_items = self.driver.get_cookies() for cookie_item in cookie_items: self.cookies[cookie_item[&apos;name&apos;]] = cookie_item[&apos;value&apos;] def get_token(self): url = &apos;https://mp.weixin.qq.com&apos; response = requests.get(url=url, cookies=self.cookies) self.token = re.findall(r&apos;token=(\\d+)&apos;, str(response.url))[0] def get_fakeid(self,query): query_id = &#123; &apos;action&apos;: &apos;search_biz&apos;, &apos;token&apos;: self.token, &apos;lang&apos;: &apos;zh_CN&apos;, &apos;f&apos;: &apos;json&apos;, &apos;ajax&apos;: &apos;1&apos;, &apos;random&apos;: random.random(), &apos;query&apos;: query, &apos;begin&apos;: &apos;0&apos;, &apos;count&apos;: &apos;5&apos;, &#125; search_url = &apos;https://mp.weixin.qq.com/cgi-bin/searchbiz?&apos; search_response = requests.get(search_url, cookies=self.cookies, headers=self.header, params=query_id) tmp_url = search_response.url # 构造结果url # print(tmp_url) lists = search_response.json().get(&apos;list&apos;)[0] # print(lists) fakeid = lists.get(&apos;fakeid&apos;) return fakeid def get_url(self): for query in self.wechat_official_accounts: count = 0 fakeid = self.get_fakeid(query) while True: query_id_data = &#123; &apos;token&apos;: self.token, &apos;lang&apos;: &apos;zh_CN&apos;, &apos;f&apos;: &apos;json&apos;, &apos;ajax&apos;: &apos;1&apos;, &apos;random&apos;: random.random(), &apos;action&apos;: &apos;list_ex&apos;, &apos;begin&apos;: count, &apos;count&apos;: &apos;10&apos;, &apos;query&apos;: self.query, &apos;fakeid&apos;: fakeid, &apos;type&apos;: &apos;9&apos; &#125; appmsg_url = &apos;https://mp.weixin.qq.com/cgi-bin/appmsg?&apos; appmsg_response = requests.get(appmsg_url, cookies=self.cookies, headers=self.header,params=query_id_data) tmp_appmsg_url = appmsg_response.url print(tmp_appmsg_url) appmsg_response_json = json.loads(appmsg_response.content) app_msg_cnt = appmsg_response_json[&apos;app_msg_cnt&apos;] print(appmsg_response_json) for msg_list in appmsg_response_json[&apos;app_msg_list&apos;]: print(msg_list[&apos;link&apos;]) self.article_url_list.append(msg_list[&apos;link&apos;]) if app_msg_cnt &lt;= 10 or app_msg_cnt - count &lt;= 10: break else: count += 10 print(self.article_url_list) print(len(self.article_url_list)) with open(&apos;article_url.txt&apos;, &apos;w&apos;) as file: for url in self.article_url_list: file.write(url) file.write(&apos;\\n&apos;)if __name__ == &apos;__main__&apos;: wechat_official_accounts = [&apos;公众号微信号&apos;] username = &apos;公众号账号&apos; password = &apos;公众号密码&apos; wechat_official = WechatArticleUrl(wechat_official_accounts,username,password) wechat_official.__main__() 参考来自：https://www.jianshu.com/p/adcc630336ae\u0010","tags":[{"name":"Python爬虫","slug":"Python爬虫","permalink":"http://yanjin.io/tags/Python爬虫/"}]},{"title":"如何写一篇永远保存在这个世界中的文章","date":"2018-04-26T03:41:18.000Z","path":"2018/04/26/如何写一篇永远保存在这个世界中的文章/","text":"目的最近我们身边发生了很多事情，比如说北大岳欣事件，比如说武汉理工大学研究生因为导师欺压跳楼事件等等。这里面经常发生的一件事情是，人们的发声被删除。比如说你写的公众号文章，或者是帖子，很容易就从网络上抹除了痕迹。 但直到前几天我看到了一篇文章，它介绍了区块链的一个应用,才有了一个比较完美的解决方法。我们可以利用区块链来记录我们的文章。 区块链 一句话，它是一种特殊的分布式数据库。 首先，区块链的主要作用是储存信息。任何需要保存的信息，都可以写入区块链，也可以从里面读取，所以它是数据库。 其次，任何人都可以架设服务器，加入区块链网络，成为一个节点。区块链的世界里面，没有中心节点，每个节点都是平等的，都保存着整个数据库。你可以向任何一个节点，写入/读取数据，因为所有节点最后都会同步，保证区块链一致。 区块链没有管理员，它是彻底无中心的。其他的数据库都有管理员，但是区块链没有。如果有人想对区块链添加审核，也实现不了，因为它的设计目标就是防止出现居于中心地位的管理当局。 正是因为无法管理，区块链才能做到无法被控制。否则一旦大公司大集团控制了管理权，他们就会控制整个平台，其他使用者就都必须听命于他们了。 引用来自：http://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html 所以，我们利用区块链的不可删除性，来记录我们的文章。那么什么时候需要利用这个特性呢？那就是当你遇到了不公平的对待，需要在这个世界上，在网络发声的时候。当然，我们假设你所面对的不公是真实的，不是伪造的。 也许有的人在此时此刻说的谎话被人们当真了。可若你在区块链中记录了这一件事情，一百年后，事情的真相还是会水落石出。 区块链记录方法我自己是从某一个交易平台买了 100 RMB 以太坊币，然后从交易平台转账到我自己的钱包。至于要怎么买币，就留给大家去谷歌了。希望大家能够试一试这个探索的过程。因为直接得到的答案并不会深刻。但我就被坑了，从交易平台提现到钱包又要收手续费，把以太坊币换成人民币大概是 40+ RMB。 因此，首先你要有以太坊币，有了币之后你就可以发起转账了。而且买币之前你最好要有一个电子钱包，我用的是 imToken。 不过这个钱包不能自己给自己转账，我的方法就是安卓多开这个软件，创建了两个钱包，我就通过一个钱包转账给另外一个钱包。另外因为转账本身是需要给矿工手续费的，你把数据记录在区块链上，总要有人来处理吧。那就是矿工，矿工的收益除了自己挖到的币，还有就是这种交易费。 对于要记录的内容，英文内容可以直接转成 16 进制码，中文内容则要以 UTF-8 码的字符串形式转为 16 进制码。 转换网址：http://tool.haooyou.com/code?group=convert&amp;type=strToHex&amp;charset=UTF-8 所以我要先把自己这篇的文章以 UTF-8 码的字符串形式转为 16 进制码，最后还要在代码之前加上固定头部“0x”以表示 16 进制。 为了能够记录我们的文章，转账的时候要选择高级选项，这样我们才能把这个内容记录在区块链中。要记得千万不要把内容写在「备注」里面，要写在高级选项的十六进制数据中。 高级选项会让你自定义 Gas Price和 Gas Limit。 一笔转账需要花费矿工费 = Gas Price * Gas Limit。通常情况下，如果有人只说 Gas ，指的就是 Gas Limit，Gas Limitt 相当于汽车需要加多少汽油， Gas Price 相当于每升汽油的价格。 因为我这篇文章的字数接近 1500 字，所以这一次我输入的 Gas Limit 为 3000000，Gas Price 为 2 gwei。你必须包括足够的 gas 来支付计算资源，否则由于 Gas 不够报错 Out of gas。但最后我这个就没花完，所有未使用的 gas 在转账结束时退还了。 我试了一下，1500 左右的字矿工手续费大概需要人民币 7 块钱左右，也不贵。大家少喝两瓶饮料，就能让你的文章永远记录下来了。然后会得到最重要的 Hash 值，它是一长串数字字母。它是这个记录的凭据，你可以用各种方法把它记录下来。因为之后你可以在任何一个以太坊的节点中查询到你曾经记录过的信息。 以太坊查询网址：https://etherscan.io 在这里输入那串转账记录的 Hash 值，就可以看到你记录的文章啦。 后记我从过去这些事件得到最大的一个启发是，我们面前没有绝对的真相。你会发现呈现在你面前的数据都是别人想给你看到的。很多新闻，一开始是这个风向，说这个不好那个不好，某某的错。后来一研究，一推敲，发现很多地方是错的。 那么，上面的这种情况可能就要要求新闻工作者们有更高的追求。作为程序员，也要有自己的要求。我希望自己要有职业操守，和道德的修养。我们这一代最聪明的人，最顶尖的人，如果都去弄广告的算法，想着如何让人去点击广告，我个人觉得是一个很令人害怕的事情。 所以我希望能够做一些真正意义上有用的工具给大家，去改善我们的生活，去改变这个世界。 最后我把这文章记录在以太坊区块链上，如果有一天这个博客不在了，拿着那串 Hash 值还能看到我写下来的文字。 本文区块链查询地址 Hash：6ba91b389726c26116816bc5eba0d474c4a3f3af066078d294d36fe86c11dac5 参考方法和引用来自：http://www.wdk.pw/1410.html http://www.pingwest.com/how-to-post-blog-on-blockchain/","tags":[{"name":"感悟","slug":"感悟","permalink":"http://yanjin.io/tags/感悟/"}]}]