<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanJin&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/4e7f4e9d900110ab9c32f0cbabd072cb</icon>
  <subtitle>每一个不曾起舞的日子都是对生命的辜负</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yanjin.io/"/>
  <updated>2018-11-15T13:11:27.474Z</updated>
  <id>http://yanjin.io/</id>
  
  <author>
    <name>Yan Jin</name>
    <email>yimjin@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>威胁猎人初级安全实习生面经</title>
    <link href="http://yanjin.io/2018/11/15/interviewThreadHunter/"/>
    <id>http://yanjin.io/2018/11/15/interviewThreadHunter/</id>
    <published>2018-11-15T01:42:58.897Z</published>
    <updated>2018-11-15T13:11:27.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="威胁猎人初级安全实习生面经"><a href="#威胁猎人初级安全实习生面经" class="headerlink" title="威胁猎人初级安全实习生面经"></a>威胁猎人初级安全实习生面经</h1><h2 id="面试时间及岗位"><a href="#面试时间及岗位" class="headerlink" title="面试时间及岗位"></a>面试时间及岗位</h2><p>时间：2018 年 11 月 9 日 下午 4 点</p><p>岗位：威胁猎人初级安全实习生</p><h2 id="技术官一面"><a href="#技术官一面" class="headerlink" title="技术官一面"></a>技术官一面</h2><p>技术官主要是看了我的简历，开始说道他也是通信工程毕业的，知道我们电子信息科学与技术学什么，知道我们学的很杂哈哈。</p><p>然后问了我下面几个问题：</p><p>1.OSI 七层模型是哪七层？（没答出来全部，记得一两个）</p><p>2.有没有用过 Linux 系统</p><p>3.Cat 命令和 Grep 命令的使用方法，比如说考了我如何匹配搜索两个 TXT，一个 TXT 文本里面有很多 ip 地址，另外一个 TXT 文本里面包含了很多黑产的监控流量有 ip 地址，发送数据包之类的</p><p>4.是否了解黑产和灰产，让我说说自己知道的</p><p>我回答了猫池，还有物联网 IOT 的肉鸡 DDOS 攻击，打码平台，薅羊毛党啊等等</p><p>然后技术官就跟我介绍了他们这个部门主要做啥</p><h2 id="CTO二面"><a href="#CTO二面" class="headerlink" title="CTO二面"></a>CTO二面</h2><p>当时大佬一进来我就震惊了，我以为一面就可以了，我只是面一个实习生咋还跑出来大佬呢</p><p>1.什么时候开始学安全的（我回答今年年初）</p><p>2.设计一个登陆注册的系统有什么要考虑的地方</p><p>要有验证码功能，而且最好用现在比较难以破解的验证码，比如 Google 和网易的验证码。</p><p>密码也应该有强度要求，然后不能直接明文发生登陆或者注册请求到服务器，要加盐加密传输，数据库存储也应该是加盐加密保存，防止被脱裤之后明文裸奔</p><p>参数还要带有 csfr_token 值防止 CSRF 攻击</p><p>cookie 中要设置 HttpOnly 属性，那么通过 js 脚本将无法读取到 cookie 信息，这样能有效的防止 XSS 攻击</p><p>对于参数的输入要进行参数化参训防止SQL注入</p><p>3.https 能不能被破解</p><p>我说可以，就是在客户端或者服务器端劫持，替换了证明就可以看到 https 明文传输的内容。但是 CTO 指出来这是因为你用了抓包工具，而且还是在网站没有校验证书的情况下，如果校验的话中间人劫持也没用</p><p>4.我简历上学校正方的漏洞是怎么挖到的</p><p>5.自己还有投别的公司拿到 offer 吗？（我说还投了一家教育公司，他就有点怀疑我是不是真的喜欢安全了，这里建议不要回答不相关的）</p><p>6.问我如果数据库被脱裤了，有什么处理方案</p><p>一赶紧溯源攻击，找到入侵者，然后寻找是否这个数据库是否在网上公开，要即可减少被售卖或者公开的机会</p><p>二是告诉用户，提醒用户改密码</p><p>面试的时候，大佬眉头一直紧皱的看着我的简历，让我很害怕</p><h2 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h2><p>HR面就没问啥了，问我期望薪水。我说 4k-5k 然后似乎被嘲笑了哈哈，说实习生工资没有这么高的，进来主要是学东西。</p><p>还问我几时可以到岗，最后是拿到这个实习生 offer 啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;威胁猎人初级安全实习生面经&quot;&gt;&lt;a href=&quot;#威胁猎人初级安全实习生面经&quot; class=&quot;headerlink&quot; title=&quot;威胁猎人初级安全实习生面经&quot;&gt;&lt;/a&gt;威胁猎人初级安全实习生面经&lt;/h1&gt;&lt;h2 id=&quot;面试时间及岗位&quot;&gt;&lt;a href=&quot;#面试
      
    
    </summary>
    
    
      <category term="面试" scheme="http://yanjin.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>携程测试实习生面经</title>
    <link href="http://yanjin.io/2018/11/15/interviewCtrip/"/>
    <id>http://yanjin.io/2018/11/15/interviewCtrip/</id>
    <published>2018-11-15T01:42:58.897Z</published>
    <updated>2018-11-15T02:05:52.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="携程测试实习生面经"><a href="#携程测试实习生面经" class="headerlink" title="携程测试实习生面经"></a>携程测试实习生面经</h1><h2 id="面试时间及岗位"><a href="#面试时间及岗位" class="headerlink" title="面试时间及岗位"></a>面试时间及岗位</h2><p>时间：2018 年 11 月 14 日 晚上 6 点</p><p>岗位：携程测试实习生</p><h2 id="HR一面"><a href="#HR一面" class="headerlink" title="HR一面"></a>HR一面</h2><p>1.是否找到了实习，因为捞我的简历起来已经过了一个星期，怕我已经找到实习了</p><p>2.还问我是否愿意接受测试的岗位，因为看到我之前有做过一些开发项目</p><p>3.约技术面试时间</p><h2 id="技术官二面"><a href="#技术官二面" class="headerlink" title="技术官二面"></a>技术官二面</h2><p>1.自我介绍一下</p><p>2.让我依次介绍我的项目干了什么</p><p>3.让我看一段代码，代码就不放出来，可能涉及公司隐私，不难</p><p>4.让我打开携程首页，问我一个机票的界面这里需要测试什么</p><p>然后面试官问我还有什么要问的吗？我就问还要不要继续面试，她说没有了，基本可以了，问我几时可以到岗，最长可以实习多久</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>想去携程是因为感觉公司比较大，投测试是因为比较好进，开发岗位的话自己基础不够好很容易给刷，但是还没考虑好去不去携程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;携程测试实习生面经&quot;&gt;&lt;a href=&quot;#携程测试实习生面经&quot; class=&quot;headerlink&quot; title=&quot;携程测试实习生面经&quot;&gt;&lt;/a&gt;携程测试实习生面经&lt;/h1&gt;&lt;h2 id=&quot;面试时间及岗位&quot;&gt;&lt;a href=&quot;#面试时间及岗位&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="面试" scheme="http://yanjin.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>360企业安全实习生面经</title>
    <link href="http://yanjin.io/2018/11/15/interview360/"/>
    <id>http://yanjin.io/2018/11/15/interview360/</id>
    <published>2018-11-15T01:42:58.897Z</published>
    <updated>2018-11-18T14:31:51.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="360企业安全实习生面经"><a href="#360企业安全实习生面经" class="headerlink" title="360企业安全实习生面经"></a>360企业安全实习生面经</h1><h2 id="面试时间及岗位"><a href="#面试时间及岗位" class="headerlink" title="面试时间及岗位"></a>面试时间及岗位</h2><p>时间：2018 年 11 月 17 日 下午 4 点</p><p>岗位：360企业安全实习生</p><h2 id="技术官面"><a href="#技术官面" class="headerlink" title="技术官面"></a>技术官面</h2><p>1.是否还有课，论文什么时候答辩</p><p>2.看我比较擅长 Python，问我有没有搭过什么系统</p><p>搭过公众号开发的一个查询功能</p><p>3.有没有写过爬虫或者什么漏洞利用工具（ EXP 和 POC ）</p><p>写过 Python 爬虫，抢课代码，没写过 EXP 和 POC </p><p>4.Linux 进程如何查看？</p><p>我回答 ps -a,但是应该回答 ps aux 更好</p><p>5.Windows 安全日志在哪里？</p><p>当时没回答出来</p><p>答案：计算机 - 管理 - 事件查看器 - Windows 日志 - 安全</p><p>6.目前有用过哪些扫描器？</p><p>Nmap、AWVS、sqlmap、BurpSuite</p><p>当时回答 BurpSuite 说没有扫描功能很尴尬，技术官指出来说 BurpSuite 是现在最好用的扫描器，集成了各种功能，抓包解码重放爆破</p><p>7.有没有实习过</p><p>没有实习过，刚找实习，面试官因此就问我过去新环境有没有问题</p><p>我回答之前社团工作了两年，经常与人沟通，适应能力很好</p><p>8.任意文件读取漏洞产生的原理</p><p>下载功能或者读取文件时候没有对权限进行控制，允许它跳转到 WEB 目录</p><p>9.任意文件读取漏洞正常出现在什么功能点？</p><p>下载功能或者读取文件，查看一些文件的时候</p><p>10.XSS 原理</p><p>XSS 有三种类型(反射型、存储型、DOM 型)，原理是因为没有过滤客户端提交的数据，被利用后回显到平台</p><p>11.有没有利用过 XSS 平台</p><p>没有……</p><p>12.目前有接触过什么病毒木马吗</p><p><em>WannaCry</em>病毒</p><p>13.病毒环境有哪些特征？病毒的一些特征（除了勒索软件，比如挖矿有什么特征）</p><p>CPU利用资源特别高、不停的发包</p><p>面试官解释这属于网络行为，挖矿会请求矿池，可以通过抓包的方式观察是不是一直在访问矿池，可以确认是不是有挖矿行为</p><p>本机上可能有蠕虫行为、肯定会扩散，植入一堆挖矿病毒</p><p>本机上以防你删除掉查杀掉，还会有一些自启动服务防止被删除</p><p>14.祖籍在哪里</p><p>15.平时有没有处理过 EXCEL 和 WORD，有没有做过一些数据统计或者数据分析</p><p>有的，用过Python数据分析，EXCEL基本操作快捷键都会</p><p>16.EXCEL函数有用过哪些？</p><p>sum、mid、count、if、lookup</p><p>17.是不是打算走普通实习，要不要考虑走校招，再过两轮面试</p><p>走实习，我就问有没有机会转正，面试官说有，看实习表现</p><p>18.问我有没有用过 Java</p><p>没有</p><p>19.问我有没有考虑过在家那边找工作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;360企业安全实习生面经&quot;&gt;&lt;a href=&quot;#360企业安全实习生面经&quot; class=&quot;headerlink&quot; title=&quot;360企业安全实习生面经&quot;&gt;&lt;/a&gt;360企业安全实习生面经&lt;/h1&gt;&lt;h2 id=&quot;面试时间及岗位&quot;&gt;&lt;a href=&quot;#面试时间及岗
      
    
    </summary>
    
    
      <category term="面试" scheme="http://yanjin.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>金山服务端开发实习面试总结</title>
    <link href="http://yanjin.io/2018/05/14/interWPS/"/>
    <id>http://yanjin.io/2018/05/14/interWPS/</id>
    <published>2018-05-14T02:42:19.000Z</published>
    <updated>2018-05-14T06:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试时间及岗位"><a href="#面试时间及岗位" class="headerlink" title="面试时间及岗位"></a>面试时间及岗位</h1><p>时间：2018 年 5 月 14 日 上午 10 点 </p><p>岗位：金山办公软件服务端开发工程师实习生</p><h1 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h1><p>以下文字和面试时候问题不一定一摸一样，靠记忆补充的。</p><p>问：你会 CSS3 吗？</p><p>答：不会</p><p>问：你会 JS 吗</p><p>答：不会</p><p>问：那这个岗位需要这两个技能啊</p><p>答：但是我可以很快学习这两个，我自学能力比较好。比如说我做的那个微信公众号查询形势与政策的功能，只花了 10 天左右。</p><p>问：一般人学 Python 3 天就够啦</p><p>我：……</p><p>面试官看了看我项目的经历写着创业基础一键刷课，抢课助手。问我为什么要写这些程序，创业基础课程本来就是学生要学生听课的，你这样子等同于作弊。</p><p>我：…..（我就是想锻炼一下技术，帮帮别人。但是面试官说的太有道理了，我没话说，只好赞同。这种课上了有啥用？）</p><p>面试官：你这个是政治不正确</p><p>我：……</p><p>面试官：你为什么要写这个教学平台的一键查询程序呢？</p><p>我：为了方便大家查询，之前同学们如果有几门作业未提交，就需要一个一个点进去看，很不方便。我的这个程序可以直接一次显示完全部科目的未提交作业。</p><p>面试官：那你这样为什么不直接跟开发厂商反应，让他们提升用户体验呢？你现在这个程序有人用吗？写了几天花费这么多时间，但是没有实际用途。</p><p>我：我想过写成微信小程序给大家用……</p><p>面试官：你为什么要在你的简历上写这么多社团经历，在大学里面花这么多时间去社团，这些社团经历跟你写代码有关系吗？</p><p>我：但是加入了社团锻炼了我沟通能力，社交能力啊。</p><p>面试官：那这些能力和写代码能力有关系吗？</p><p>我：……</p><p>我：面试官，那我给您看看我的成绩单。之前因为在社团也没有好好学习，但现在退出后一直在好好学习，每学期都在进步，从 2.6, 3.1, 3.5 再到 4.1 。说明我的学习能力还是可以的。</p><p>面试官：但是你可以看看班上一些女孩子，学习成绩很好，但是写代码不行啊。这个也跟写代码能力没有关系。</p><p>我：……</p><p>面试官：那还是来点实际的，你说一下二分查找的算法。</p><p>我：一开始说了直接从中间开始查找，但是根本还没排序。想到排序了，但是不会写冒泡排序的算法了。</p><p>没答出来面试官就直接走了，说面试结束。我知道自己肯定挂了，等了许久 HR 也没来，我就直接走了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="1-刷题刷题刷题！"><a href="#1-刷题刷题刷题！" class="headerlink" title="1.刷题刷题刷题！"></a>1.刷题刷题刷题！</h2><p>我的数据结构一点都没学，也没去刷题，这个是面试失败最根本的原因。我之前复习的策略都在简历上的知识点，没有弄面试的算法题，这个致命伤。</p><h2 id="2-简历上的项目"><a href="#2-简历上的项目" class="headerlink" title="2.简历上的项目"></a>2.简历上的项目</h2><p>不要写那些带有违反规定或者政治不正确的项目。比如我这次的抢课助手和刷课项目，我也得承认这两个东西违反了一些规定，但是学技术的人难道就没有 Geek 精神吗？你可以测试，但是不能有盈利就好了。</p><h2 id="3-社团经历"><a href="#3-社团经历" class="headerlink" title="3.社团经历"></a>3.社团经历</h2><p>如果是面试技术岗位，能不写还是不写了吧。面试官对社团经历的个人偏好完全影响了他对你的个人印象。有的面试官可能喜欢社会实践经验多的，有的面试官完全不喜欢。</p><p>说到社团就是一把辛酸泪，感觉两年的付出给这个面试官全抛否定了。但我知道我收获了什么，见世面，沟通能力，协调能力，这是写代码能带来的？</p><p>不是，这些能力才是社会上更重要的技能。</p><p>写代码是一定要很熟练的，但是只会写代码是不行的。</p><p>不过也看得出来，我现在是连写代码都不会的人哈哈哈！本末倒置。</p><h2 id="4-大学成绩"><a href="#4-大学成绩" class="headerlink" title="4.大学成绩"></a>4.大学成绩</h2><p>金山的这个面试官不看重成绩，看重的是写代码的能力。</p><p>我也知道一个朋友的朋友，就会因为项目经验多，写代码能力强去了小米。虽然挂科很多，成绩很差。</p><p>这也从侧面体现出了互联网公司对于大学成绩的看法。</p><p>但是从我自己的角度来看，如果想继续读研究生，成绩还是非常重要的。你有成绩至少有几条路可以选，没有成绩就只能工作了，或者你很有钱去国外留学。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面试时间及岗位&quot;&gt;&lt;a href=&quot;#面试时间及岗位&quot; class=&quot;headerlink&quot; title=&quot;面试时间及岗位&quot;&gt;&lt;/a&gt;面试时间及岗位&lt;/h1&gt;&lt;p&gt;时间：2018 年 5 月 14 日 上午 10 点 &lt;/p&gt;
&lt;p&gt;岗位：金山办公软件服务端开发工
      
    
    </summary>
    
    
      <category term="面试" scheme="http://yanjin.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号推文永久链接爬虫</title>
    <link href="http://yanjin.io/2018/04/26/wechatArticleSpider/"/>
    <id>http://yanjin.io/2018/04/26/wechatArticleSpider/</id>
    <published>2018-04-26T03:41:18.000Z</published>
    <updated>2018-05-06T15:12:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信公众号推文永久链接爬虫"><a href="#微信公众号推文永久链接爬虫" class="headerlink" title="微信公众号推文永久链接爬虫"></a>微信公众号推文永久链接爬虫</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>获取某个或多个微信公众号的所有文章，并且文章的链接是永久链接。比如我之前想分析学校公众号的某一个长期栏目，就需要他所有相关推送的文章内容。但是有 100+ 的推送，总不可能一篇一篇文章的去保存它的链接对吧？因此要想办法自动获取到所有的链接，再通过打开链接得到文章内容。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>利用微信公众号后台素材管理－新建图文素材－超链接－查找文章（公众号）的接口。因此，我们要做的就是模拟这个请求。<br>1.Selenium ＋ Webdriver 登陆微信公众平台，获取公众号的Cookie<br>2.登陆之后获取 token 值，因为之后所有请求都需要带 token 这个参数<br>3.模拟搜索公众号，每个公众号有对应的 fakeid，我们要得到公众号的fakeid<br>4.模拟搜索公众号内的文章，self.query 这个值为搜索公众号文章的关键字，默认为空，可以修改为自己想要找的公众号文章标题对应的关键字。此时会返回一个 JSON 包，app_msg_list 中的 link 就是我们要的链接。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>你要有一个自己的微信公众号（订阅号）<br>Python环境：Python3</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>修改 wechat_official_accounts 为想要搜索公众号的微信号，支持多个微信号<br>修改 username 为自己订阅号的账号<br>修改 password 为自己订阅号的密码<br>修改 self.query 为自己想要搜索的公众号文章标题对应的关键字<br>修改 self.driver = webdriver.Firefox(executable_path=’/Users/zl/Downloads/geckodriver’) 为自己对应的 geckodriver 内核地址，也可以使用 Chrome 浏览器</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>Talk is cheap，show you my code。<br>Github 项目代码地址: <a href="https://github.com/ttys0001/wechat-spider" target="_blank" rel="noopener">https://github.com/ttys0001/wechat-spider</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import re</span><br><span class="line">import random</span><br><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">class WechatArticleUrl:</span><br><span class="line"></span><br><span class="line">    def __init__(self,wechat_official_accounts,username,password):</span><br><span class="line">        self.wechat_official_accounts = wechat_official_accounts</span><br><span class="line">        self.article_url_list = []</span><br><span class="line">        self.driver = webdriver.Firefox(executable_path=&apos;/Users/zl/Downloads/geckodriver&apos;)</span><br><span class="line">        self.account_str = [username, password]</span><br><span class="line">        self.cookies = &#123;&#125;</span><br><span class="line">        self.token = &apos;&apos;</span><br><span class="line">        self.header = &#123;</span><br><span class="line">            &quot;HOST&quot;: &quot;mp.weixin.qq.com&quot;,</span><br><span class="line">            &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        self.query = &apos;&apos;</span><br><span class="line"></span><br><span class="line">    def __main__(self):</span><br><span class="line">        self.login_wechat_official()</span><br><span class="line">        self.get_token()</span><br><span class="line">        self.get_url()</span><br><span class="line"></span><br><span class="line">    def login_wechat_official(self):</span><br><span class="line">        self.driver.get(&apos;https://mp.weixin.qq.com/&apos;)</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        # ============登录，获取cookie</span><br><span class="line">        self.driver.find_element_by_name(&apos;account&apos;).clear()</span><br><span class="line">        self.driver.find_element_by_name(&apos;account&apos;).send_keys(self.account_str[0])</span><br><span class="line">        self.driver.find_element_by_name(&apos;password&apos;).clear()</span><br><span class="line">        self.driver.find_element_by_name(&apos;password&apos;).send_keys(self.account_str[1])</span><br><span class="line">        # 在自动输完密码之后记得点一下记住我</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        self.driver.find_element_by_xpath(&quot;./*//a[@class=&apos;btn_login&apos;]&quot;).click()</span><br><span class="line">        # 拿手机扫二维码！</span><br><span class="line">        time.sleep(10)</span><br><span class="line">        self.driver.get(&apos;https://mp.weixin.qq.com/&apos;)</span><br><span class="line">        cookie_items = self.driver.get_cookies()</span><br><span class="line">        for cookie_item in cookie_items:</span><br><span class="line">            self.cookies[cookie_item[&apos;name&apos;]] = cookie_item[&apos;value&apos;]</span><br><span class="line"></span><br><span class="line">    def get_token(self):</span><br><span class="line">        url = &apos;https://mp.weixin.qq.com&apos;</span><br><span class="line">        response = requests.get(url=url, cookies=self.cookies)</span><br><span class="line">        self.token = re.findall(r&apos;token=(\d+)&apos;, str(response.url))[0]</span><br><span class="line"></span><br><span class="line">    def get_fakeid(self,query):</span><br><span class="line">        query_id = &#123;</span><br><span class="line">            &apos;action&apos;: &apos;search_biz&apos;,</span><br><span class="line">            &apos;token&apos;: self.token,</span><br><span class="line">            &apos;lang&apos;: &apos;zh_CN&apos;,</span><br><span class="line">            &apos;f&apos;: &apos;json&apos;,</span><br><span class="line">            &apos;ajax&apos;: &apos;1&apos;,</span><br><span class="line">            &apos;random&apos;: random.random(),</span><br><span class="line">            &apos;query&apos;: query,</span><br><span class="line">            &apos;begin&apos;: &apos;0&apos;,</span><br><span class="line">            &apos;count&apos;: &apos;5&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">        search_url = &apos;https://mp.weixin.qq.com/cgi-bin/searchbiz?&apos;</span><br><span class="line">        search_response = requests.get(search_url, cookies=self.cookies, headers=self.header, params=query_id)</span><br><span class="line">        tmp_url = search_response.url  # 构造结果url</span><br><span class="line">        # print(tmp_url)</span><br><span class="line">        lists = search_response.json().get(&apos;list&apos;)[0]</span><br><span class="line">        # print(lists)</span><br><span class="line">        fakeid = lists.get(&apos;fakeid&apos;)</span><br><span class="line">        return fakeid</span><br><span class="line"></span><br><span class="line">    def get_url(self):</span><br><span class="line">        for query in self.wechat_official_accounts:</span><br><span class="line">            count = 0</span><br><span class="line">            fakeid = self.get_fakeid(query)</span><br><span class="line">            while True:</span><br><span class="line">                query_id_data = &#123;</span><br><span class="line">                    &apos;token&apos;: self.token,</span><br><span class="line">                    &apos;lang&apos;: &apos;zh_CN&apos;,</span><br><span class="line">                    &apos;f&apos;: &apos;json&apos;,</span><br><span class="line">                    &apos;ajax&apos;: &apos;1&apos;,</span><br><span class="line">                    &apos;random&apos;: random.random(),</span><br><span class="line">                    &apos;action&apos;: &apos;list_ex&apos;,</span><br><span class="line">                    &apos;begin&apos;: count,</span><br><span class="line">                    &apos;count&apos;: &apos;10&apos;,</span><br><span class="line">                    &apos;query&apos;: self.query,</span><br><span class="line">                    &apos;fakeid&apos;: fakeid,</span><br><span class="line">                    &apos;type&apos;: &apos;9&apos;</span><br><span class="line">                &#125;</span><br><span class="line">                appmsg_url = &apos;https://mp.weixin.qq.com/cgi-bin/appmsg?&apos;</span><br><span class="line">                appmsg_response = requests.get(appmsg_url, cookies=self.cookies, headers=self.header,params=query_id_data)</span><br><span class="line">                tmp_appmsg_url = appmsg_response.url</span><br><span class="line">                print(tmp_appmsg_url)</span><br><span class="line">                appmsg_response_json = json.loads(appmsg_response.content)</span><br><span class="line">                app_msg_cnt = appmsg_response_json[&apos;app_msg_cnt&apos;]</span><br><span class="line">                print(appmsg_response_json)</span><br><span class="line">                for msg_list in appmsg_response_json[&apos;app_msg_list&apos;]:</span><br><span class="line">                    print(msg_list[&apos;link&apos;])</span><br><span class="line">                    self.article_url_list.append(msg_list[&apos;link&apos;])</span><br><span class="line"></span><br><span class="line">                if app_msg_cnt &lt;= 10 or app_msg_cnt - count &lt;= 10:</span><br><span class="line">                    break</span><br><span class="line">                else:</span><br><span class="line">                    count += 10</span><br><span class="line"></span><br><span class="line">            print(self.article_url_list)</span><br><span class="line">            print(len(self.article_url_list))</span><br><span class="line">            with open(&apos;article_url.txt&apos;, &apos;w&apos;) as file:</span><br><span class="line">                for url in self.article_url_list:</span><br><span class="line">                    file.write(url)</span><br><span class="line">                    file.write(&apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    wechat_official_accounts = [&apos;公众号微信号&apos;]</span><br><span class="line">    username = &apos;公众号账号&apos;</span><br><span class="line">    password = &apos;公众号密码&apos;</span><br><span class="line">    wechat_official = WechatArticleUrl(wechat_official_accounts,username,password)</span><br><span class="line">    wechat_official.__main__()</span><br></pre></td></tr></table></figure><p>参考来自：<a href="https://www.jianshu.com/p/adcc630336ae" target="_blank" rel="noopener">https://www.jianshu.com/p/adcc630336ae</a><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微信公众号推文永久链接爬虫&quot;&gt;&lt;a href=&quot;#微信公众号推文永久链接爬虫&quot; class=&quot;headerlink&quot; title=&quot;微信公众号推文永久链接爬虫&quot;&gt;&lt;/a&gt;微信公众号推文永久链接爬虫&lt;/h1&gt;&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; cla
      
    
    </summary>
    
    
      <category term="Python爬虫" scheme="http://yanjin.io/tags/Python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
